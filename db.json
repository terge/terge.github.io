{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"7b6a717524fcaf10b84f2252c8941aa2a6342d00","modified":1468667820000},{"_id":"themes/indigo/README.md","hash":"7da26382b8544a4d5d4acc39e789c9eacc816163","modified":1468930795155},{"_id":"themes/indigo/_config.yml","hash":"632e5dea9a8790d3fe1dfe9b8d3cbd65af62a54d","modified":1469174294571},{"_id":"themes/indigo/package.json","hash":"16b1325b2ef6cd72b0b02c4a66cc4c0d85fa3513","modified":1468930795155},{"_id":"source/_drafts/Binder是怎样达到进程间通讯的.md","hash":"6ad43464eb658c4c4152bab789b54c4ad20f2e30","modified":1468662849000},{"_id":"source/_drafts/JAVA虚拟机是如何做内存管理的.md","hash":"8dc920d4ee377772785185a9abd69dd8b9889b99","modified":1468665228000},{"_id":"source/_drafts/MarkDown语法参考.md","hash":"c139f2bacf869217931a5d8846abf472caafc5f1","modified":1468671508000},{"_id":"source/_drafts/View的事件分发是怎样的.md","hash":"3dff415d59b9d3dd0d62db35333467bbb8eb0a05","modified":1468665109000},{"_id":"source/_drafts/为什么离职.md","hash":"2629e73eb7c3192f7a8808f9147c2b06c2174149","modified":1468662986000},{"_id":"source/_drafts/如何在webview实现全屏播放视频.md","hash":"14765f8fa7fdfb2cdb5ca0c63f8477e3935d9670","modified":1468979618772},{"_id":"source/_drafts/如何实现webview上传本地图片.md","hash":"4a1580c8a3e5edd9ea2e0ddd2b2fe9aaf56a72e0","modified":1468979567215},{"_id":"source/_drafts/对自己的职业规划是怎样的.md","hash":"f8c710bdbf367b1b8a35cbefbbd2ee4e00f931f1","modified":1468663008000},{"_id":"source/_drafts/怎么理解RESTfull-API.md","hash":"2bf212326256748bbadbc62b11c9a20ce1b0ead3","modified":1468663646000},{"_id":"source/_drafts/怎样做Android的性能优化.md","hash":"b1309d7e796b3af30afa11d8ae26907a74878986","modified":1468665147000},{"_id":"source/_drafts/现在产品中哪些做得好的和不足的地方.md","hash":"367f9315bb8ad62ab25bcea877c06e1073043dd6","modified":1468662966000},{"_id":"source/_drafts/聊下Android的适配.md","hash":"331cb47c31bfb26648892a6a60c7812b9cfc88ab","modified":1468662919000},{"_id":"source/_drafts/聊聊API里面使用的算法.md","hash":"4e96b5818af45f4d0bff0ac2b5dcfc8920afb581","modified":1468665182000},{"_id":"source/_drafts/聊聊Android的启动模式.md","hash":"69ea1d4f55f5f5b665b32a4514a08354c54ad792","modified":1469178850973},{"_id":"source/_drafts/聊聊JAVA的同步机制.md","hash":"5b593f933b90261cada91f8de40dc33242695573","modified":1468665347000},{"_id":"source/_drafts/自行实现常用数据结构.md","hash":"c6935b2f8509bf4f6cf5aaa7e7d7e90edd77cc59","modified":1468665642000},{"_id":"source/_drafts/说下Android-View的绘图原理.md","hash":"a3f912062a77d87aebaa43062cf740cdaa120edc","modified":1468665047000},{"_id":"source/_drafts/说下WindowManager的原理.md","hash":"5bc60abd1e60f7ae3e67870b0b808d19e5008d55","modified":1468665266000},{"_id":"source/_drafts/说下动画的实现原理.md","hash":"b5ba8d6cd9ffb4c48ab9a4fe63925a0282e4e6df","modified":1468665686000},{"_id":"source/_drafts/说下对Thread的理解.md","hash":"7c344cbc3b1910e785969fdf8262a758f969f5f2","modified":1468758591459},{"_id":"source/_drafts/说下现在做的SDK的整体架构.md","hash":"832afd788a116c714f86da81033e42455312c6e7","modified":1468665503000},{"_id":"source/_drafts/说说你的ClassLoader的理解.md","hash":"b842060b70459b924a6d4e34b03ab88b248bba16","modified":1468662790000},{"_id":"source/_posts/WHY-HOW-WHEN.md","hash":"aa2d4bcac51135aadba4732c76db50cf52f15873","modified":1468654521000},{"_id":"source/_posts/说一下Handler的原理.md","hash":"ba3bf036f85f9d94f393159c0db34482b659e85d","modified":1469341219226},{"_id":"source/tags/index.md","hash":"c6d5549c5a63e3bdf596bd75e9018f3565712d4a","modified":1468930952058},{"_id":"themes/indigo/.git/COMMIT_EDITMSG","hash":"d1614f231c708a12ecc7b793bdc262e7ff51e9ad","modified":1468981471010},{"_id":"themes/indigo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1468930795155},{"_id":"themes/indigo/.git/config","hash":"6b613cb29f065c300a0c42f50ad6b8fdefa0f5fc","modified":1468930795155},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1468930787923},{"_id":"themes/indigo/.git/index","hash":"5db36bfe97468387ed8182b8701be314f5d68f14","modified":1469183143560},{"_id":"themes/indigo/.git/packed-refs","hash":"3ed59d17c6ee39b91b169d37470b764902740b90","modified":1468930795155},{"_id":"themes/indigo/layout/archive.ejs","hash":"21bfd12209615796b16bf794df75fc857a19b32c","modified":1468930795155},{"_id":"themes/indigo/layout/category.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1468930795155},{"_id":"themes/indigo/layout/index.ejs","hash":"9a3b3d88f4992d20c082383e3155e9e3bc9b6409","modified":1468930795155},{"_id":"themes/indigo/layout/layout.ejs","hash":"fc36f206a97bf65eacead631a0dbf043dcf356ac","modified":1468930795155},{"_id":"themes/indigo/layout/page.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1468930795155},{"_id":"themes/indigo/layout/post.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1468930795155},{"_id":"themes/indigo/layout/tag.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1468930795155},{"_id":"themes/indigo/layout/tags.ejs","hash":"91e94dcd997acb71ac688993715390c7e48b89c1","modified":1468930795155},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1468930787923},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1468930787923},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1468930787923},{"_id":"themes/indigo/.git/logs/HEAD","hash":"e6f0b16e06509da95b4dcf40aa1547b442aad141","modified":1468981471010},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"3b160eaaefb7a493d9dc96c932f06f0ee2772f7d","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"51cf12c71469b3db65828b672b46cc7071974bda","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"03f75c55cb78686603a430fa42c63805872fb902","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"4c104599e23d77e91f2bd79d0ae9cdafe952cb01","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"3e21a04d31e7d6481c6460f2a6ac48448cfaea5f","modified":1468931385998},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"5761c6cceafd683773f78ee01ec2c92cb585cca4","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"912aed381f0b6f5ff7adfa18bfae617d5a6f06be","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"bba8497d29f405e8e6d1c8674fe7fc8f2a42cbb2","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"c3394a1257a4f2cf30644016d9dc43e3a44d61dc","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"73ae079958f2cdc746b259fa1d0857002aa44267","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"af06ecb670125aa51bf0bc1acba0dc1129793389","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"1253621c13936ca0f9fcafa7fd35d6f7ddc600b6","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"1c8e7a1d512f4b81431f03eb80b0b331229799bb","modified":1468930795155},{"_id":"themes/indigo/source/css/style.less","hash":"bc2bcbf43091599ab63edc79413f9d08e8fb061f","modified":1468930795171},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1468930795171},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1468930795171},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1468930795171},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1468930795171},{"_id":"themes/indigo/source/img/logo.jpg","hash":"9d85d200dc96463e751bc7dbad8f0687b38fe490","modified":1467868589404},{"_id":"themes/indigo/source/js/main.js","hash":"e3ccf70da521a03a581b1dd23b0cbea9b4f023a9","modified":1468930795171},{"_id":"themes/indigo/source/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1468930795171},{"_id":"themes/indigo/.git/refs/heads/master","hash":"b8676f6a7ded7caf1ed8ff344dff28d9b0e9c66d","modified":1468981471010},{"_id":"themes/indigo/.git/objects/1a/8ae3c8d39ce2526b12291cdfe90cc275d92d31","hash":"091352201fa9f6ff0c76eca6ffda387db123772c","modified":1468981471010},{"_id":"themes/indigo/.git/objects/2e/933c17b5ca7630165b2353a594d1b10ebfa752","hash":"195e30dc6442ae8bd4bc70c5cdd3cc7e481d6ee6","modified":1468981471010},{"_id":"themes/indigo/.git/objects/2f/e8720c2272c2638b09a9ab05477f59f01e0e39","hash":"83cd49109b0ea9e694562211bdd6cbaa6da2c169","modified":1468981471010},{"_id":"themes/indigo/.git/objects/42/97f60b41e026f6139e48fffea9d9ba82030151","hash":"ebd862b95efa0e43fe8d182bbc6990d87e1bc055","modified":1468981471010},{"_id":"themes/indigo/.git/objects/34/c32ce4230ed56a097142c6d9f7d42f8b28967d","hash":"f83bd6aaa63955af1964a5b99fc0ad8243659c3d","modified":1468981471010},{"_id":"themes/indigo/.git/objects/73/843bfe9d218f7416b41cc23b79c2199ea0585f","hash":"54c25526759c691e9b1a96b692748ae43868207f","modified":1468981471010},{"_id":"themes/indigo/.git/objects/82/8ae464fe77a4a32809a19c7f4f81daafa48e49","hash":"6d02b9e130c6576040c669081396e55f6da2c5f6","modified":1468981471010},{"_id":"themes/indigo/.git/objects/pack/pack-cb5a3cc2e4f932cc08fa7c855084866e3e35a3fd.idx","hash":"e37d2d99843423ba267c1df539db35952caefa78","modified":1468930794815},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"41bef893d2f6569a8319b968936184f19475da40","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"528490c368d92266b6a8ea3ecab5c0f42877bac3","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"6c359ca773dee87ecf7a1553a31a9418c900583a","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"6b2ab0a9a67732ba18bc8520f0ff6805457bb427","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"33181dbf9c126b3354a2e6a83605c40674b222b7","modified":1468930795155},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1468930795155},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"69180b54d5d9aa460e67a245e8537fdd0b6d0640","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f078270dfe0a3f1757ec20598a6d05448bf4b151","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"bf9c09de9a989cf597ca78e78240f8496dbca4f8","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"a43d79dee0f667d85bcddee23ad43e736e133ee3","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"3bf77e233d6d8fb1e0ecf394a10a6694a8e39660","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"c32656b8d51fca9b3bfa95f1aa44b51ade203e18","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"c4b080ea12670c3bbb15fa85e5a66f109fba3389","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"d73a12ca56cd710a13cb61074958c82a5cb95d63","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"6a256bfa57547ede5e05dfa61878f582780db6ad","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"da574cf0ad43c32dd24da6906bfc4f6c1054e07b","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"61019c991dff98a380314b88c6f875d693c3e7e1","modified":1468930795159},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"dc26e274703827cb28b6c9beff53b4176cdce783","modified":1468930795159},{"_id":"themes/indigo/.git/objects/96/90da85670563ef688a4d2a115c3522ca5d784f","hash":"3f86b2cbbe5a822e6441e2298f5e774b67655aa7","modified":1468981471010},{"_id":"themes/indigo/.git/objects/00/e3f5431e10a05bcee147951f6740880cf968d0","hash":"c539443b71e756115e5e3dfac23f8bf209d61fa5","modified":1468981471010},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"9d9b1946357a653adebc29859ad0de70adcc27dd","modified":1468930795159},{"_id":"themes/indigo/.git/logs/refs/heads/master","hash":"e6f0b16e06509da95b4dcf40aa1547b442aad141","modified":1468981471010},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1468930795163},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1468930795171},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1468930795171},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1468930795171},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1468930795171},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1468930795171},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1468930795155},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1468930795159},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1468930795159},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1468930795163},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1468930795163},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1468930795167},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1468930795171},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1468930795171},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"394a37da0be21699cf3bfaa0817492b4c7688ad1","modified":1468930795155},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1468930795163},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1468930795163},{"_id":"themes/indigo/.git/objects/pack/pack-cb5a3cc2e4f932cc08fa7c855084866e3e35a3fd.pack","hash":"ead478f432e05beaff663a22224996f35c80a5f3","modified":1468930794815},{"_id":"public/atom.xml","hash":"84c8a295d09960ce787554da0eedad43cc47269a","modified":1469342415102},{"_id":"public/content.json","hash":"5925e1f2d29205bb8562e42eeac6800504643abb","modified":1469342415103},{"_id":"public/tags/index.html","hash":"8fedaa949c28bddd7a7ee30bfc93e8fcdf4e8e5e","modified":1469182343720},{"_id":"public/2016/07/16/说一下Handler的原理/index.html","hash":"778ef571cc8979f6c08936c1c0d662e3f12bcf4c","modified":1469342415290},{"_id":"public/2016/07/16/WHY-HOW-WHEN/index.html","hash":"373d45e59dd8de9849d72c0fc1cc59908fbaa022","modified":1469182343720},{"_id":"public/archives/index.html","hash":"3b795bdd58f34a440892b15a88c9a693805ce7a5","modified":1469182343720},{"_id":"public/archives/2016/index.html","hash":"42f5066594f360e4fb2cfa98f956de9677802eb6","modified":1469182343720},{"_id":"public/archives/2016/07/index.html","hash":"520a213b737fe8c6a538275fbcb60525555f7a21","modified":1469182343721},{"_id":"public/index.html","hash":"e6a100e0f12d9e052caa312722f705ccbb7dac91","modified":1469342415290},{"_id":"public/favicon.ico","hash":"7b6a717524fcaf10b84f2252c8941aa2a6342d00","modified":1469182343730},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1469182343730},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1469182343730},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1469182343730},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1469182343731},{"_id":"public/img/logo.jpg","hash":"9d85d200dc96463e751bc7dbad8f0687b38fe490","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1469182343731},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1469182343732},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1469182343732},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1469182343761},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1469182343762},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1469182343762},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1469182343762},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1469182343763},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1469182343763},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1469182343763},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1469182343763},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1469182343763},{"_id":"public/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1469182343767},{"_id":"public/js/main.js","hash":"e3ccf70da521a03a581b1dd23b0cbea9b4f023a9","modified":1469182343767},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1469182343767},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1469182343780},{"_id":"public/css/style.css","hash":"d17b88176b67c957c4a50be3991a3893e610b74d","modified":1469182344039},{"_id":"source/_drafts/Android面试题整理.md","hash":"040d5f3c199a79331b8558b49d575a7a90409769","modified":1469341219226},{"_id":"source/_drafts/你是如何理解AIDL的.md","hash":"fa08359823ceb310ff5d7347c1c2e46c87766723","modified":1469341219226},{"_id":"source/_drafts/如何理解MVVM模式.md","hash":"e998fe2b70dde0201ad7c6565c768b591907a877","modified":1469341219226}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2016-07-19T12:21:22.000Z","layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-19 20:21:22\nlayout: tags\nnoDate: true\ncomments: false\n---\n","updated":"2016-07-19T12:22:32.058Z","path":"tags/index.html","_id":"ciqxl8fbi000ov222e3ylsx4g","content":"","excerpt":"","more":""}],"Post":[{"title":"Binder是怎样达到进程间通讯的","_content":"","source":"_drafts/Binder是怎样达到进程间通讯的.md","raw":"---\ntitle: Binder是怎样达到进程间通讯的\ntags:\n---\n","slug":"Binder是怎样达到进程间通讯的","published":0,"date":"2016-07-22T10:00:52.413Z","updated":"2016-07-16T09:54:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8f9y0000v222fjt80ukm","content":"","excerpt":"","more":""},{"title":"JAVA虚拟机是如何做内存管理的","_content":"","source":"_drafts/JAVA虚拟机是如何做内存管理的.md","raw":"---\ntitle: JAVA虚拟机是如何做内存管理的\ntags:\n---\n","slug":"JAVA虚拟机是如何做内存管理的","published":0,"date":"2016-07-22T10:00:52.417Z","updated":"2016-07-16T10:33:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fa20001v22268879rmy","content":"","excerpt":"","more":""},{"title":"MarkDown语法参考","_content":"","source":"_drafts/MarkDown语法参考.md","raw":"---\ntitle: MarkDown语法参考\ntags:\n---\n","slug":"MarkDown语法参考","published":0,"date":"2016-07-22T10:00:52.421Z","updated":"2016-07-16T12:18:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fa50002v222vuftdev0","content":"","excerpt":"","more":""},{"title":"View的事件分发是怎样的","_content":"","source":"_drafts/View的事件分发是怎样的.md","raw":"---\ntitle: View的事件分发是怎样的\ntags:\n---\n","slug":"View的事件分发是怎样的","published":0,"date":"2016-07-22T10:00:52.425Z","updated":"2016-07-16T10:31:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fa70003v222qzwl863f","content":"","excerpt":"","more":""},{"title":"为什么离职","_content":"","source":"_drafts/为什么离职.md","raw":"---\ntitle: 为什么离职\ntags:\n---\n","slug":"为什么离职","published":0,"date":"2016-07-22T10:00:52.429Z","updated":"2016-07-16T09:56:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fa80004v222gesz5gwu","content":"","excerpt":"","more":""},{"title":"如何在webview实现全屏播放视频","_content":"","source":"_drafts/如何在webview实现全屏播放视频.md","raw":"---\ntitle: 如何在webview实现全屏播放视频\ntags:\n---\n","slug":"如何在webview实现全屏播放视频","published":0,"date":"2016-07-22T10:00:52.409Z","updated":"2016-07-20T01:53:38.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fa90005v222gdthdinl","content":"","excerpt":"","more":""},{"title":"如何实现webview上传本地图片","_content":"","source":"_drafts/如何实现webview上传本地图片.md","raw":"---\ntitle: 如何实现webview上传本地图片\ntags:\n---\n","slug":"如何实现webview上传本地图片","published":0,"date":"2016-07-22T10:00:52.413Z","updated":"2016-07-20T01:52:47.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fad0006v222gcfc6fup","content":"","excerpt":"","more":""},{"title":"对自己的职业规划是怎样的","_content":"","source":"_drafts/对自己的职业规划是怎样的.md","raw":"---\ntitle: 对自己的职业规划是怎样的\ntags:\n---\n","slug":"对自己的职业规划是怎样的","published":0,"date":"2016-07-22T10:00:52.433Z","updated":"2016-07-16T09:56:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8faf0007v222l1ikn3aw","content":"","excerpt":"","more":""},{"title":"怎么理解RESTfull API","_content":"","source":"_drafts/怎么理解RESTfull-API.md","raw":"---\ntitle: 怎么理解RESTfull API\ntags:\n---\n","slug":"怎么理解RESTfull-API","published":0,"date":"2016-07-22T10:00:52.433Z","updated":"2016-07-16T10:07:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fak0008v2227l2hz75g","content":"","excerpt":"","more":""},{"title":"怎样做Android的性能优化","_content":"","source":"_drafts/怎样做Android的性能优化.md","raw":"---\ntitle: 怎样做Android的性能优化\ntags:\n---\n","slug":"怎样做Android的性能优化","published":0,"date":"2016-07-22T10:00:52.437Z","updated":"2016-07-16T10:32:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fal0009v222nw8itad2","content":"","excerpt":"","more":""},{"title":"现在产品中哪些做得好的和不足的地方","_content":"","source":"_drafts/现在产品中哪些做得好的和不足的地方.md","raw":"---\ntitle: 现在产品中哪些做得好的和不足的地方\ntags:\n---\n","slug":"现在产品中哪些做得好的和不足的地方","published":0,"date":"2016-07-22T10:00:52.437Z","updated":"2016-07-16T09:56:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fan000av2229k30ysmh","content":"","excerpt":"","more":""},{"title":"聊下Android的适配","_content":"","source":"_drafts/聊下Android的适配.md","raw":"---\ntitle: 聊下Android的适配\ntags:\n---\n","slug":"聊下Android的适配","published":0,"date":"2016-07-22T10:00:52.437Z","updated":"2016-07-16T09:55:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fap000bv222gvbl2s3x","content":"","excerpt":"","more":""},{"title":"聊聊Android的启动模式","_content":"1. task 返回栈\n2. 案例：ProxyActivity会被游戏Activity的singleTask清掉\n3. 解决方案：CP不愿意改ａ.用一个单独的启动页面　　b.不使用new task，使其在一个task里面\n","source":"_drafts/聊聊Android的启动模式.md","raw":"---\ntitle: 聊聊Android的启动模式\ntags:\n---\n1. task 返回栈\n2. 案例：ProxyActivity会被游戏Activity的singleTask清掉\n3. 解决方案：CP不愿意改ａ.用一个单独的启动页面　　b.不使用new task，使其在一个task里面\n","slug":"聊聊Android的启动模式","published":0,"date":"2016-07-22T10:00:52.409Z","updated":"2016-07-22T09:14:10.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8far000cv222rko50mle","content":"<ol>\n<li>task 返回栈</li>\n<li>案例：ProxyActivity会被游戏Activity的singleTask清掉</li>\n<li>解决方案：CP不愿意改ａ.用一个单独的启动页面　　b.不使用new task，使其在一个task里面</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>task 返回栈</li>\n<li>案例：ProxyActivity会被游戏Activity的singleTask清掉</li>\n<li>解决方案：CP不愿意改ａ.用一个单独的启动页面　　b.不使用new task，使其在一个task里面</li>\n</ol>\n"},{"title":"聊聊JAVA的同步机制","_content":"","source":"_drafts/聊聊JAVA的同步机制.md","raw":"---\ntitle: 聊聊JAVA的同步机制\ntags:\n---\n","slug":"聊聊JAVA的同步机制","published":0,"date":"2016-07-22T10:00:52.441Z","updated":"2016-07-16T10:35:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fas000dv222e5jjn52o","content":"","excerpt":"","more":""},{"layout":"dfaft","title":"聊聊API里面使用的算法","date":"2016-07-16T10:33:02.000Z","_content":"","source":"_drafts/聊聊API里面使用的算法.md","raw":"layout: dfaft\ntitle: 聊聊API里面使用的算法\ndate: 2016-07-16 18:33:02\ntags:\n---\n","slug":"聊聊API里面使用的算法","published":0,"updated":"2016-07-16T10:33:02.000Z","comments":1,"photos":[],"link":"","_id":"ciqxl8fau000ev222n5t85zqf","content":"","excerpt":"","more":""},{"title":"自行实现常用数据结构","_content":"","source":"_drafts/自行实现常用数据结构.md","raw":"---\ntitle: 自行实现常用数据结构\ntags:\n---\n","slug":"自行实现常用数据结构","published":0,"date":"2016-07-22T10:00:52.445Z","updated":"2016-07-16T10:40:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8faw000fv222f0jx2d2a","content":"","excerpt":"","more":""},{"layout":"dfaft","title":"说下Android View的绘图原理","date":"2016-07-16T10:30:47.000Z","_content":"","source":"_drafts/说下Android-View的绘图原理.md","raw":"layout: dfaft\ntitle: 说下Android View的绘图原理\ndate: 2016-07-16 18:30:47\ntags:\n---\n","slug":"说下Android-View的绘图原理","published":0,"updated":"2016-07-16T10:30:47.000Z","comments":1,"photos":[],"link":"","_id":"ciqxl8fax000gv222dzj10qye","content":"","excerpt":"","more":""},{"title":"说下WindowManager的原理","_content":"","source":"_drafts/说下WindowManager的原理.md","raw":"---\ntitle: 说下WindowManager的原理\ntags:\n---\n","slug":"说下WindowManager的原理","published":0,"date":"2016-07-22T10:00:52.449Z","updated":"2016-07-16T10:34:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fb1000hv22238krtbes","content":"","excerpt":"","more":""},{"title":"说下动画的实现原理","_content":"","source":"_drafts/说下动画的实现原理.md","raw":"---\ntitle: 说下动画的实现原理\ntags:\n---\n","slug":"说下动画的实现原理","published":0,"date":"2016-07-22T10:00:52.449Z","updated":"2016-07-16T10:41:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fb2000iv222osngom15","content":"","excerpt":"","more":""},{"title":"说下对Thread的理解","_content":"","source":"_drafts/说下对Thread的理解.md","raw":"---\ntitle: 说下对Thread的理解\ntags:\n---\n","slug":"说下对Thread的理解","published":0,"date":"2016-07-22T10:00:52.457Z","updated":"2016-07-17T12:29:51.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fb4000jv222hgwqfc6p","content":"","excerpt":"","more":""},{"title":"说下现在做的SDK的整体架构","_content":"","source":"_drafts/说下现在做的SDK的整体架构.md","raw":"---\ntitle: 说下现在做的SDK的整体架构\ntags:\n---\n","slug":"说下现在做的SDK的整体架构","published":0,"date":"2016-07-22T10:00:52.453Z","updated":"2016-07-16T10:38:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fb5000kv222x6az71r3","content":"","excerpt":"","more":""},{"title":"说说你的ClassLoader的理解","_content":"","source":"_drafts/说说你的ClassLoader的理解.md","raw":"---\ntitle: 说说你的ClassLoader的理解\ntags:\n---\n","slug":"说说你的ClassLoader的理解","published":0,"date":"2016-07-22T10:00:52.453Z","updated":"2016-07-16T09:53:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fb6000lv2229ldtycog","content":"","excerpt":"","more":""},{"title":"WHY？HOW? WHEN?","date":"2016-07-16T07:12:05.000Z","_content":"\nWHY ? 为什么要写\n\n    1. 教学相长：能说清楚才叫真的懂，为了真的懂，就得说清楚\n    2. 文案套路：写一个东西，要怎么讲，才能让人听起来自然，且能理解我我所表达的东西，这个很重要，在工作中，设计文档，以及邮件说明问题时候都需要这种思维\n    3. 知识沉淀：已经理解一个东西，些许日志不接触，就会生疏，又重头查一遍，得不偿失，得有一个地方去整理这些东西\n\n\nHOW ? 怎样写\n\n    1. 为了解决什么问题\n    2. 具体是怎么去解决此问题的\n    3. 有哪些相似的方案，优劣如何\n    4. 具体的应用场景\n    5. 思考\n    6. 原创\n\n\n\nWHEN ? 什么时候写\n\n    目标可达，就要求有具体的时间，不然没法衡量\n    对于这里的技术文章，<font color=red>每周写一篇</font>\n","source":"_posts/WHY-HOW-WHEN.md","raw":"---\ntitle: WHY？HOW? WHEN?\ndate: 2016-07-16 15:12:05\ntags:\n---\n\nWHY ? 为什么要写\n\n    1. 教学相长：能说清楚才叫真的懂，为了真的懂，就得说清楚\n    2. 文案套路：写一个东西，要怎么讲，才能让人听起来自然，且能理解我我所表达的东西，这个很重要，在工作中，设计文档，以及邮件说明问题时候都需要这种思维\n    3. 知识沉淀：已经理解一个东西，些许日志不接触，就会生疏，又重头查一遍，得不偿失，得有一个地方去整理这些东西\n\n\nHOW ? 怎样写\n\n    1. 为了解决什么问题\n    2. 具体是怎么去解决此问题的\n    3. 有哪些相似的方案，优劣如何\n    4. 具体的应用场景\n    5. 思考\n    6. 原创\n\n\n\nWHEN ? 什么时候写\n\n    目标可达，就要求有具体的时间，不然没法衡量\n    对于这里的技术文章，<font color=red>每周写一篇</font>\n","slug":"WHY-HOW-WHEN","published":1,"updated":"2016-07-16T07:35:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqxl8fb7000mv222q44p9x5q","content":"<p>WHY ? 为什么要写</p>\n<pre><code>1. 教学相长：能说清楚才叫真的懂，为了真的懂，就得说清楚\n2. 文案套路：写一个东西，要怎么讲，才能让人听起来自然，且能理解我我所表达的东西，这个很重要，在工作中，设计文档，以及邮件说明问题时候都需要这种思维\n3. 知识沉淀：已经理解一个东西，些许日志不接触，就会生疏，又重头查一遍，得不偿失，得有一个地方去整理这些东西\n</code></pre><p>HOW ? 怎样写</p>\n<pre><code>1. 为了解决什么问题\n2. 具体是怎么去解决此问题的\n3. 有哪些相似的方案，优劣如何\n4. 具体的应用场景\n5. 思考\n6. 原创\n</code></pre><p>WHEN ? 什么时候写</p>\n<pre><code>目标可达，就要求有具体的时间，不然没法衡量\n对于这里的技术文章，&lt;font color=red&gt;每周写一篇&lt;/font&gt;\n</code></pre>","excerpt":"","more":"<p>WHY ? 为什么要写</p>\n<pre><code>1. 教学相长：能说清楚才叫真的懂，为了真的懂，就得说清楚\n2. 文案套路：写一个东西，要怎么讲，才能让人听起来自然，且能理解我我所表达的东西，这个很重要，在工作中，设计文档，以及邮件说明问题时候都需要这种思维\n3. 知识沉淀：已经理解一个东西，些许日志不接触，就会生疏，又重头查一遍，得不偿失，得有一个地方去整理这些东西\n</code></pre><p>HOW ? 怎样写</p>\n<pre><code>1. 为了解决什么问题\n2. 具体是怎么去解决此问题的\n3. 有哪些相似的方案，优劣如何\n4. 具体的应用场景\n5. 思考\n6. 原创\n</code></pre><p>WHEN ? 什么时候写</p>\n<pre><code>目标可达，就要求有具体的时间，不然没法衡量\n对于这里的技术文章，&lt;font color=red&gt;每周写一篇&lt;/font&gt;\n</code></pre>"},{"title":"说一下Handler的原理","date":"2016-07-16T07:33:31.000Z","_content":"\n#### Handler在解决什么问题?\nhandler 是为了解决线程间通讯的问题而设计的\n\n\n#### 如果让你设计你要怎么做？\n那么，如果没有handler，如何做到线程A与线程B进行通讯？\n回调？监听？这样的话，要么每次都要定义自己所写回调接口，双方必须定义好回调参数格式，要么定义一个通用方法，而handler其实就相当于这个通用的方法\negg:主线程 启动了子线程A去完成一项任务，并对A说\"你拿着这个handler，等你做完了用它告诉我就可以\"，等到A做完了，通过handler.sendMessage来发出暗号，这时候主线程收到这个消息，就知道A已经做完了，然后去处理对应的逻辑。\n\n\n#### Handler是怎么设计来解决此问题的\n对于这个功能，handler要定义成通用逻辑，所以handler提供了如下功能来满足不同业务场景需要（同性质的功能就不一一列出了）\n\n\n    1. obtainMessage()                //获取一个空消息\n    2. sendMessage(Message msg)       //发送消息\n    3. handleMessage(Message msg)     //收到消息\n    4. post(Runnable r)               //抛出一个runnable\n    5. removeCallbacks(Runnable r)    //移除runnable\n\n\n以上就构成了一个通用的回调逻辑，实际上我的很多的回调接口都可以通过此方式进行，用好系统提供的现成功能，一般情况下都好过于自己单独开发，除非你很清楚它并不能满足自己的需求\n\n\n好了，线程通讯的问题解决了，看起来并没有什么特殊的，就是定义了一个通用的回调方案，然而我们都知道那个Looper还没提到\n\n#### Handler的消息发到哪里了\nhandler.sendMessage 和handler.postRunanable其实质上最后都是调用到handler.sendMessageAt(msg,time)，runnable只是赋值给了msg.callback,也是一个消息，如果你愿意，完全可以Message.obtain(handler,runable)，再通过handler.sendMessage来发送runnable\n\n那么handler.sendMessageAt(msg,time) 的逻辑做的事情就是将msg入到消息队列里面去\nqueue.enqueueMessage(msg,time)\n\n#### ThreadLoacal是什么鬼\n为什么你们都要提到theadLocal,这个与主题没有一毛钱关系，将其理解成Thread一个Map就很好理解了\n\n#### MessageQueue是怎么组织的？BlockQueue?\n具体的实现都在native中 ？暂且当做BlockQueue来理解//todo\nenqueueMessage\n异常情况(msg.target == null  || msg.isInUse() )\nsendMessage会自动设置target,//什么场景下修改会为空？？\nmsg.isInUse会在入队列时候修改，所以在重复使用时候可以通过Message.obtain(msg)来客隆一份数据一样但是没有使用过的Message来使用\nsendMessageAtFrontOfQueue\n\n此队列并非先进先出队列，而是一个LinkedQueue,在enqueueMessage,会根据Message.when，将其插入到合适的位置，队列中的消息是按照when排序的\n\n\n#### Message可以插队么？Message.when\n在发消息时候发送一个when 比 当期MessageQueue时间还小的when即可插队到对头，你也许会说，我哪里知道当前对头的消息when是多少，所以直接设置when为0即可插队到对头，这可以应用在优先级高的处理\n\n但是when可以修改么？\nwhen是package访问权限(还好不是final)，是否可以通过新建一个与其包名相同的类来修改？\nwhen值来自 sendMessageAt的那个时间，在enqueue时候在MessageQueue里面被赋值，不要煞费苦心修改了，平时直接发送的sendMessage的when就是0\n如果同时发送的消息如果都是0，还在排队处理的话，后来的消息会插在队列的前面，都是立即处理的话，处理谁都一样\n\n\n#### Message可以发给不同的线程执行么？Message.target\nHandler.obtain系列会将Message.target赋值为this\n而Handler.postRunnable 获取的Message没有赋值target\n但是无论哪种方式，最终会在enqueueMessage中将target赋值为Handler.this\n也就是是说在使用哪个Handler发送消息，最终一定是进了他的Looper\n\n但是一旦enqueueMessage后，处理逻辑就以及脱离了Handler的控制了，执行的结果都只会发送到Message.target中\n\n#### MainLooper ActivityThread.man() 如何做到一直待机\n\n#### sendMessage与postRunable有什么区别\n最终都是调用setMessageAt(msg,time),不同的是获取Message方式不同，postRunable是将unable赋值给message.callback\n\n#### 如何停止Looper\nLooper在loop的时候，如果取到一个Message为null，就会自行跳出，但是MessageQueue只有在队列为空和已经退出时候才会给Looper返回null. 不能通过发送null消息来停止，\n同时Looper本身也提供了quite api来退出循环，原理是调用MQ.quite，在下一个next时候MQ返回给Looper一个null,这样Looper就自行结束\n\n在Looper中会调用msg.target.dispatchMessage(msg),这样又将消息返回给handler来执行了，而此时消息执行是looper中调用的，也就是消息执行是在looper所在的线程调用的，这样此消息也就在此线程被消费\n同时会调用msg.resycleUnchecked()回收此对象\n\n#### 消息执行的优先级\n- 会先处理msg.callback也（post进来的runnable就是设置到callback中）\n- 如果handler有设置callback，消息会发送到callback的handlermessge()中消费\n- 如果没设置就在本handler.handlerMessage()中消费\n- 而一般情况下我的处理逻辑都在handlerMessage中，这样消息就又回来了\n\n#### HandlerThread替我们做了哪些事情\n- http://blog.csdn.net/qq_23547831/article/details/50936584\n\n#### 为什么框架层要提示防止内存泄露？因为Looper会一直循环\n\n#### MessageQueue 的Barrier是什么鬼\n\n#### ActivityThread是个好东西\n","source":"_posts/说一下Handler的原理.md","raw":"---\ntitle: 说一下Handler的原理\ndate: 2016-07-16 15:33:31\ntags:\n---\n\n#### Handler在解决什么问题?\nhandler 是为了解决线程间通讯的问题而设计的\n\n\n#### 如果让你设计你要怎么做？\n那么，如果没有handler，如何做到线程A与线程B进行通讯？\n回调？监听？这样的话，要么每次都要定义自己所写回调接口，双方必须定义好回调参数格式，要么定义一个通用方法，而handler其实就相当于这个通用的方法\negg:主线程 启动了子线程A去完成一项任务，并对A说\"你拿着这个handler，等你做完了用它告诉我就可以\"，等到A做完了，通过handler.sendMessage来发出暗号，这时候主线程收到这个消息，就知道A已经做完了，然后去处理对应的逻辑。\n\n\n#### Handler是怎么设计来解决此问题的\n对于这个功能，handler要定义成通用逻辑，所以handler提供了如下功能来满足不同业务场景需要（同性质的功能就不一一列出了）\n\n\n    1. obtainMessage()                //获取一个空消息\n    2. sendMessage(Message msg)       //发送消息\n    3. handleMessage(Message msg)     //收到消息\n    4. post(Runnable r)               //抛出一个runnable\n    5. removeCallbacks(Runnable r)    //移除runnable\n\n\n以上就构成了一个通用的回调逻辑，实际上我的很多的回调接口都可以通过此方式进行，用好系统提供的现成功能，一般情况下都好过于自己单独开发，除非你很清楚它并不能满足自己的需求\n\n\n好了，线程通讯的问题解决了，看起来并没有什么特殊的，就是定义了一个通用的回调方案，然而我们都知道那个Looper还没提到\n\n#### Handler的消息发到哪里了\nhandler.sendMessage 和handler.postRunanable其实质上最后都是调用到handler.sendMessageAt(msg,time)，runnable只是赋值给了msg.callback,也是一个消息，如果你愿意，完全可以Message.obtain(handler,runable)，再通过handler.sendMessage来发送runnable\n\n那么handler.sendMessageAt(msg,time) 的逻辑做的事情就是将msg入到消息队列里面去\nqueue.enqueueMessage(msg,time)\n\n#### ThreadLoacal是什么鬼\n为什么你们都要提到theadLocal,这个与主题没有一毛钱关系，将其理解成Thread一个Map就很好理解了\n\n#### MessageQueue是怎么组织的？BlockQueue?\n具体的实现都在native中 ？暂且当做BlockQueue来理解//todo\nenqueueMessage\n异常情况(msg.target == null  || msg.isInUse() )\nsendMessage会自动设置target,//什么场景下修改会为空？？\nmsg.isInUse会在入队列时候修改，所以在重复使用时候可以通过Message.obtain(msg)来客隆一份数据一样但是没有使用过的Message来使用\nsendMessageAtFrontOfQueue\n\n此队列并非先进先出队列，而是一个LinkedQueue,在enqueueMessage,会根据Message.when，将其插入到合适的位置，队列中的消息是按照when排序的\n\n\n#### Message可以插队么？Message.when\n在发消息时候发送一个when 比 当期MessageQueue时间还小的when即可插队到对头，你也许会说，我哪里知道当前对头的消息when是多少，所以直接设置when为0即可插队到对头，这可以应用在优先级高的处理\n\n但是when可以修改么？\nwhen是package访问权限(还好不是final)，是否可以通过新建一个与其包名相同的类来修改？\nwhen值来自 sendMessageAt的那个时间，在enqueue时候在MessageQueue里面被赋值，不要煞费苦心修改了，平时直接发送的sendMessage的when就是0\n如果同时发送的消息如果都是0，还在排队处理的话，后来的消息会插在队列的前面，都是立即处理的话，处理谁都一样\n\n\n#### Message可以发给不同的线程执行么？Message.target\nHandler.obtain系列会将Message.target赋值为this\n而Handler.postRunnable 获取的Message没有赋值target\n但是无论哪种方式，最终会在enqueueMessage中将target赋值为Handler.this\n也就是是说在使用哪个Handler发送消息，最终一定是进了他的Looper\n\n但是一旦enqueueMessage后，处理逻辑就以及脱离了Handler的控制了，执行的结果都只会发送到Message.target中\n\n#### MainLooper ActivityThread.man() 如何做到一直待机\n\n#### sendMessage与postRunable有什么区别\n最终都是调用setMessageAt(msg,time),不同的是获取Message方式不同，postRunable是将unable赋值给message.callback\n\n#### 如何停止Looper\nLooper在loop的时候，如果取到一个Message为null，就会自行跳出，但是MessageQueue只有在队列为空和已经退出时候才会给Looper返回null. 不能通过发送null消息来停止，\n同时Looper本身也提供了quite api来退出循环，原理是调用MQ.quite，在下一个next时候MQ返回给Looper一个null,这样Looper就自行结束\n\n在Looper中会调用msg.target.dispatchMessage(msg),这样又将消息返回给handler来执行了，而此时消息执行是looper中调用的，也就是消息执行是在looper所在的线程调用的，这样此消息也就在此线程被消费\n同时会调用msg.resycleUnchecked()回收此对象\n\n#### 消息执行的优先级\n- 会先处理msg.callback也（post进来的runnable就是设置到callback中）\n- 如果handler有设置callback，消息会发送到callback的handlermessge()中消费\n- 如果没设置就在本handler.handlerMessage()中消费\n- 而一般情况下我的处理逻辑都在handlerMessage中，这样消息就又回来了\n\n#### HandlerThread替我们做了哪些事情\n- http://blog.csdn.net/qq_23547831/article/details/50936584\n\n#### 为什么框架层要提示防止内存泄露？因为Looper会一直循环\n\n#### MessageQueue 的Barrier是什么鬼\n\n#### ActivityThread是个好东西\n","slug":"说一下Handler的原理","published":1,"updated":"2016-07-24T06:20:19.226Z","_id":"ciqxl8fb9000nv222skxumuji","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Handler在解决什么问题\"><a href=\"#Handler在解决什么问题\" class=\"headerlink\" title=\"Handler在解决什么问题?\"></a>Handler在解决什么问题?</h4><p>handler 是为了解决线程间通讯的问题而设计的</p>\n<h4 id=\"如果让你设计你要怎么做？\"><a href=\"#如果让你设计你要怎么做？\" class=\"headerlink\" title=\"如果让你设计你要怎么做？\"></a>如果让你设计你要怎么做？</h4><p>那么，如果没有handler，如何做到线程A与线程B进行通讯？<br>回调？监听？这样的话，要么每次都要定义自己所写回调接口，双方必须定义好回调参数格式，要么定义一个通用方法，而handler其实就相当于这个通用的方法<br>egg:主线程 启动了子线程A去完成一项任务，并对A说”你拿着这个handler，等你做完了用它告诉我就可以”，等到A做完了，通过handler.sendMessage来发出暗号，这时候主线程收到这个消息，就知道A已经做完了，然后去处理对应的逻辑。</p>\n<h4 id=\"Handler是怎么设计来解决此问题的\"><a href=\"#Handler是怎么设计来解决此问题的\" class=\"headerlink\" title=\"Handler是怎么设计来解决此问题的\"></a>Handler是怎么设计来解决此问题的</h4><p>对于这个功能，handler要定义成通用逻辑，所以handler提供了如下功能来满足不同业务场景需要（同性质的功能就不一一列出了）</p>\n<pre><code>1. obtainMessage()                //获取一个空消息\n2. sendMessage(Message msg)       //发送消息\n3. handleMessage(Message msg)     //收到消息\n4. post(Runnable r)               //抛出一个runnable\n5. removeCallbacks(Runnable r)    //移除runnable\n</code></pre><p>以上就构成了一个通用的回调逻辑，实际上我的很多的回调接口都可以通过此方式进行，用好系统提供的现成功能，一般情况下都好过于自己单独开发，除非你很清楚它并不能满足自己的需求</p>\n<p>好了，线程通讯的问题解决了，看起来并没有什么特殊的，就是定义了一个通用的回调方案，然而我们都知道那个Looper还没提到</p>\n<h4 id=\"Handler的消息发到哪里了\"><a href=\"#Handler的消息发到哪里了\" class=\"headerlink\" title=\"Handler的消息发到哪里了\"></a>Handler的消息发到哪里了</h4><p>handler.sendMessage 和handler.postRunanable其实质上最后都是调用到handler.sendMessageAt(msg,time)，runnable只是赋值给了msg.callback,也是一个消息，如果你愿意，完全可以Message.obtain(handler,runable)，再通过handler.sendMessage来发送runnable</p>\n<p>那么handler.sendMessageAt(msg,time) 的逻辑做的事情就是将msg入到消息队列里面去<br>queue.enqueueMessage(msg,time)</p>\n<h4 id=\"ThreadLoacal是什么鬼\"><a href=\"#ThreadLoacal是什么鬼\" class=\"headerlink\" title=\"ThreadLoacal是什么鬼\"></a>ThreadLoacal是什么鬼</h4><p>为什么你们都要提到theadLocal,这个与主题没有一毛钱关系，将其理解成Thread一个Map就很好理解了</p>\n<h4 id=\"MessageQueue是怎么组织的？BlockQueue\"><a href=\"#MessageQueue是怎么组织的？BlockQueue\" class=\"headerlink\" title=\"MessageQueue是怎么组织的？BlockQueue?\"></a>MessageQueue是怎么组织的？BlockQueue?</h4><p>具体的实现都在native中 ？暂且当做BlockQueue来理解//todo<br>enqueueMessage<br>异常情况(msg.target == null  || msg.isInUse() )<br>sendMessage会自动设置target,//什么场景下修改会为空？？<br>msg.isInUse会在入队列时候修改，所以在重复使用时候可以通过Message.obtain(msg)来客隆一份数据一样但是没有使用过的Message来使用<br>sendMessageAtFrontOfQueue</p>\n<p>此队列并非先进先出队列，而是一个LinkedQueue,在enqueueMessage,会根据Message.when，将其插入到合适的位置，队列中的消息是按照when排序的</p>\n<h4 id=\"Message可以插队么？Message-when\"><a href=\"#Message可以插队么？Message-when\" class=\"headerlink\" title=\"Message可以插队么？Message.when\"></a>Message可以插队么？Message.when</h4><p>在发消息时候发送一个when 比 当期MessageQueue时间还小的when即可插队到对头，你也许会说，我哪里知道当前对头的消息when是多少，所以直接设置when为0即可插队到对头，这可以应用在优先级高的处理</p>\n<p>但是when可以修改么？<br>when是package访问权限(还好不是final)，是否可以通过新建一个与其包名相同的类来修改？<br>when值来自 sendMessageAt的那个时间，在enqueue时候在MessageQueue里面被赋值，不要煞费苦心修改了，平时直接发送的sendMessage的when就是0<br>如果同时发送的消息如果都是0，还在排队处理的话，后来的消息会插在队列的前面，都是立即处理的话，处理谁都一样</p>\n<h4 id=\"Message可以发给不同的线程执行么？Message-target\"><a href=\"#Message可以发给不同的线程执行么？Message-target\" class=\"headerlink\" title=\"Message可以发给不同的线程执行么？Message.target\"></a>Message可以发给不同的线程执行么？Message.target</h4><p>Handler.obtain系列会将Message.target赋值为this<br>而Handler.postRunnable 获取的Message没有赋值target<br>但是无论哪种方式，最终会在enqueueMessage中将target赋值为Handler.this<br>也就是是说在使用哪个Handler发送消息，最终一定是进了他的Looper</p>\n<p>但是一旦enqueueMessage后，处理逻辑就以及脱离了Handler的控制了，执行的结果都只会发送到Message.target中</p>\n<h4 id=\"MainLooper-ActivityThread-man-如何做到一直待机\"><a href=\"#MainLooper-ActivityThread-man-如何做到一直待机\" class=\"headerlink\" title=\"MainLooper ActivityThread.man() 如何做到一直待机\"></a>MainLooper ActivityThread.man() 如何做到一直待机</h4><h4 id=\"sendMessage与postRunable有什么区别\"><a href=\"#sendMessage与postRunable有什么区别\" class=\"headerlink\" title=\"sendMessage与postRunable有什么区别\"></a>sendMessage与postRunable有什么区别</h4><p>最终都是调用setMessageAt(msg,time),不同的是获取Message方式不同，postRunable是将unable赋值给message.callback</p>\n<h4 id=\"如何停止Looper\"><a href=\"#如何停止Looper\" class=\"headerlink\" title=\"如何停止Looper\"></a>如何停止Looper</h4><p>Looper在loop的时候，如果取到一个Message为null，就会自行跳出，但是MessageQueue只有在队列为空和已经退出时候才会给Looper返回null. 不能通过发送null消息来停止，<br>同时Looper本身也提供了quite api来退出循环，原理是调用MQ.quite，在下一个next时候MQ返回给Looper一个null,这样Looper就自行结束</p>\n<p>在Looper中会调用msg.target.dispatchMessage(msg),这样又将消息返回给handler来执行了，而此时消息执行是looper中调用的，也就是消息执行是在looper所在的线程调用的，这样此消息也就在此线程被消费<br>同时会调用msg.resycleUnchecked()回收此对象</p>\n<h4 id=\"消息执行的优先级\"><a href=\"#消息执行的优先级\" class=\"headerlink\" title=\"消息执行的优先级\"></a>消息执行的优先级</h4><ul>\n<li>会先处理msg.callback也（post进来的runnable就是设置到callback中）</li>\n<li>如果handler有设置callback，消息会发送到callback的handlermessge()中消费</li>\n<li>如果没设置就在本handler.handlerMessage()中消费</li>\n<li>而一般情况下我的处理逻辑都在handlerMessage中，这样消息就又回来了</li>\n</ul>\n<h4 id=\"HandlerThread替我们做了哪些事情\"><a href=\"#HandlerThread替我们做了哪些事情\" class=\"headerlink\" title=\"HandlerThread替我们做了哪些事情\"></a>HandlerThread替我们做了哪些事情</h4><ul>\n<li><a href=\"http://blog.csdn.net/qq_23547831/article/details/50936584\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_23547831/article/details/50936584</a></li>\n</ul>\n<h4 id=\"为什么框架层要提示防止内存泄露？因为Looper会一直循环\"><a href=\"#为什么框架层要提示防止内存泄露？因为Looper会一直循环\" class=\"headerlink\" title=\"为什么框架层要提示防止内存泄露？因为Looper会一直循环\"></a>为什么框架层要提示防止内存泄露？因为Looper会一直循环</h4><h4 id=\"MessageQueue-的Barrier是什么鬼\"><a href=\"#MessageQueue-的Barrier是什么鬼\" class=\"headerlink\" title=\"MessageQueue 的Barrier是什么鬼\"></a>MessageQueue 的Barrier是什么鬼</h4><h4 id=\"ActivityThread是个好东西\"><a href=\"#ActivityThread是个好东西\" class=\"headerlink\" title=\"ActivityThread是个好东西\"></a>ActivityThread是个好东西</h4>","excerpt":"","more":"<h4 id=\"Handler在解决什么问题\"><a href=\"#Handler在解决什么问题\" class=\"headerlink\" title=\"Handler在解决什么问题?\"></a>Handler在解决什么问题?</h4><p>handler 是为了解决线程间通讯的问题而设计的</p>\n<h4 id=\"如果让你设计你要怎么做？\"><a href=\"#如果让你设计你要怎么做？\" class=\"headerlink\" title=\"如果让你设计你要怎么做？\"></a>如果让你设计你要怎么做？</h4><p>那么，如果没有handler，如何做到线程A与线程B进行通讯？<br>回调？监听？这样的话，要么每次都要定义自己所写回调接口，双方必须定义好回调参数格式，要么定义一个通用方法，而handler其实就相当于这个通用的方法<br>egg:主线程 启动了子线程A去完成一项任务，并对A说”你拿着这个handler，等你做完了用它告诉我就可以”，等到A做完了，通过handler.sendMessage来发出暗号，这时候主线程收到这个消息，就知道A已经做完了，然后去处理对应的逻辑。</p>\n<h4 id=\"Handler是怎么设计来解决此问题的\"><a href=\"#Handler是怎么设计来解决此问题的\" class=\"headerlink\" title=\"Handler是怎么设计来解决此问题的\"></a>Handler是怎么设计来解决此问题的</h4><p>对于这个功能，handler要定义成通用逻辑，所以handler提供了如下功能来满足不同业务场景需要（同性质的功能就不一一列出了）</p>\n<pre><code>1. obtainMessage()                //获取一个空消息\n2. sendMessage(Message msg)       //发送消息\n3. handleMessage(Message msg)     //收到消息\n4. post(Runnable r)               //抛出一个runnable\n5. removeCallbacks(Runnable r)    //移除runnable\n</code></pre><p>以上就构成了一个通用的回调逻辑，实际上我的很多的回调接口都可以通过此方式进行，用好系统提供的现成功能，一般情况下都好过于自己单独开发，除非你很清楚它并不能满足自己的需求</p>\n<p>好了，线程通讯的问题解决了，看起来并没有什么特殊的，就是定义了一个通用的回调方案，然而我们都知道那个Looper还没提到</p>\n<h4 id=\"Handler的消息发到哪里了\"><a href=\"#Handler的消息发到哪里了\" class=\"headerlink\" title=\"Handler的消息发到哪里了\"></a>Handler的消息发到哪里了</h4><p>handler.sendMessage 和handler.postRunanable其实质上最后都是调用到handler.sendMessageAt(msg,time)，runnable只是赋值给了msg.callback,也是一个消息，如果你愿意，完全可以Message.obtain(handler,runable)，再通过handler.sendMessage来发送runnable</p>\n<p>那么handler.sendMessageAt(msg,time) 的逻辑做的事情就是将msg入到消息队列里面去<br>queue.enqueueMessage(msg,time)</p>\n<h4 id=\"ThreadLoacal是什么鬼\"><a href=\"#ThreadLoacal是什么鬼\" class=\"headerlink\" title=\"ThreadLoacal是什么鬼\"></a>ThreadLoacal是什么鬼</h4><p>为什么你们都要提到theadLocal,这个与主题没有一毛钱关系，将其理解成Thread一个Map就很好理解了</p>\n<h4 id=\"MessageQueue是怎么组织的？BlockQueue\"><a href=\"#MessageQueue是怎么组织的？BlockQueue\" class=\"headerlink\" title=\"MessageQueue是怎么组织的？BlockQueue?\"></a>MessageQueue是怎么组织的？BlockQueue?</h4><p>具体的实现都在native中 ？暂且当做BlockQueue来理解//todo<br>enqueueMessage<br>异常情况(msg.target == null  || msg.isInUse() )<br>sendMessage会自动设置target,//什么场景下修改会为空？？<br>msg.isInUse会在入队列时候修改，所以在重复使用时候可以通过Message.obtain(msg)来客隆一份数据一样但是没有使用过的Message来使用<br>sendMessageAtFrontOfQueue</p>\n<p>此队列并非先进先出队列，而是一个LinkedQueue,在enqueueMessage,会根据Message.when，将其插入到合适的位置，队列中的消息是按照when排序的</p>\n<h4 id=\"Message可以插队么？Message-when\"><a href=\"#Message可以插队么？Message-when\" class=\"headerlink\" title=\"Message可以插队么？Message.when\"></a>Message可以插队么？Message.when</h4><p>在发消息时候发送一个when 比 当期MessageQueue时间还小的when即可插队到对头，你也许会说，我哪里知道当前对头的消息when是多少，所以直接设置when为0即可插队到对头，这可以应用在优先级高的处理</p>\n<p>但是when可以修改么？<br>when是package访问权限(还好不是final)，是否可以通过新建一个与其包名相同的类来修改？<br>when值来自 sendMessageAt的那个时间，在enqueue时候在MessageQueue里面被赋值，不要煞费苦心修改了，平时直接发送的sendMessage的when就是0<br>如果同时发送的消息如果都是0，还在排队处理的话，后来的消息会插在队列的前面，都是立即处理的话，处理谁都一样</p>\n<h4 id=\"Message可以发给不同的线程执行么？Message-target\"><a href=\"#Message可以发给不同的线程执行么？Message-target\" class=\"headerlink\" title=\"Message可以发给不同的线程执行么？Message.target\"></a>Message可以发给不同的线程执行么？Message.target</h4><p>Handler.obtain系列会将Message.target赋值为this<br>而Handler.postRunnable 获取的Message没有赋值target<br>但是无论哪种方式，最终会在enqueueMessage中将target赋值为Handler.this<br>也就是是说在使用哪个Handler发送消息，最终一定是进了他的Looper</p>\n<p>但是一旦enqueueMessage后，处理逻辑就以及脱离了Handler的控制了，执行的结果都只会发送到Message.target中</p>\n<h4 id=\"MainLooper-ActivityThread-man-如何做到一直待机\"><a href=\"#MainLooper-ActivityThread-man-如何做到一直待机\" class=\"headerlink\" title=\"MainLooper ActivityThread.man() 如何做到一直待机\"></a>MainLooper ActivityThread.man() 如何做到一直待机</h4><h4 id=\"sendMessage与postRunable有什么区别\"><a href=\"#sendMessage与postRunable有什么区别\" class=\"headerlink\" title=\"sendMessage与postRunable有什么区别\"></a>sendMessage与postRunable有什么区别</h4><p>最终都是调用setMessageAt(msg,time),不同的是获取Message方式不同，postRunable是将unable赋值给message.callback</p>\n<h4 id=\"如何停止Looper\"><a href=\"#如何停止Looper\" class=\"headerlink\" title=\"如何停止Looper\"></a>如何停止Looper</h4><p>Looper在loop的时候，如果取到一个Message为null，就会自行跳出，但是MessageQueue只有在队列为空和已经退出时候才会给Looper返回null. 不能通过发送null消息来停止，<br>同时Looper本身也提供了quite api来退出循环，原理是调用MQ.quite，在下一个next时候MQ返回给Looper一个null,这样Looper就自行结束</p>\n<p>在Looper中会调用msg.target.dispatchMessage(msg),这样又将消息返回给handler来执行了，而此时消息执行是looper中调用的，也就是消息执行是在looper所在的线程调用的，这样此消息也就在此线程被消费<br>同时会调用msg.resycleUnchecked()回收此对象</p>\n<h4 id=\"消息执行的优先级\"><a href=\"#消息执行的优先级\" class=\"headerlink\" title=\"消息执行的优先级\"></a>消息执行的优先级</h4><ul>\n<li>会先处理msg.callback也（post进来的runnable就是设置到callback中）</li>\n<li>如果handler有设置callback，消息会发送到callback的handlermessge()中消费</li>\n<li>如果没设置就在本handler.handlerMessage()中消费</li>\n<li>而一般情况下我的处理逻辑都在handlerMessage中，这样消息就又回来了</li>\n</ul>\n<h4 id=\"HandlerThread替我们做了哪些事情\"><a href=\"#HandlerThread替我们做了哪些事情\" class=\"headerlink\" title=\"HandlerThread替我们做了哪些事情\"></a>HandlerThread替我们做了哪些事情</h4><ul>\n<li><a href=\"http://blog.csdn.net/qq_23547831/article/details/50936584\">http://blog.csdn.net/qq_23547831/article/details/50936584</a></li>\n</ul>\n<h4 id=\"为什么框架层要提示防止内存泄露？因为Looper会一直循环\"><a href=\"#为什么框架层要提示防止内存泄露？因为Looper会一直循环\" class=\"headerlink\" title=\"为什么框架层要提示防止内存泄露？因为Looper会一直循环\"></a>为什么框架层要提示防止内存泄露？因为Looper会一直循环</h4><h4 id=\"MessageQueue-的Barrier是什么鬼\"><a href=\"#MessageQueue-的Barrier是什么鬼\" class=\"headerlink\" title=\"MessageQueue 的Barrier是什么鬼\"></a>MessageQueue 的Barrier是什么鬼</h4><h4 id=\"ActivityThread是个好东西\"><a href=\"#ActivityThread是个好东西\" class=\"headerlink\" title=\"ActivityThread是个好东西\"></a>ActivityThread是个好东西</h4>"},{"title":"Android面试题整理","_content":"\n- https://github.com/JackyAndroid/AndroidInterview-Q-A/blob/master/README-CN.md\n- http://www.diycode.cc/wiki/androidinterview\n","source":"_drafts/Android面试题整理.md","raw":"---\ntitle: Android面试题整理\ntags:\n---\n\n- https://github.com/JackyAndroid/AndroidInterview-Q-A/blob/master/README-CN.md\n- http://www.diycode.cc/wiki/androidinterview\n","slug":"Android面试题整理","published":0,"date":"2016-07-24T06:20:19.226Z","updated":"2016-07-24T06:20:19.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir07u1yn0000ri22cca303sx","content":"<ul>\n<li><a href=\"https://github.com/JackyAndroid/AndroidInterview-Q-A/blob/master/README-CN.md\" target=\"_blank\" rel=\"external\">https://github.com/JackyAndroid/AndroidInterview-Q-A/blob/master/README-CN.md</a></li>\n<li><a href=\"http://www.diycode.cc/wiki/androidinterview\" target=\"_blank\" rel=\"external\">http://www.diycode.cc/wiki/androidinterview</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"https://github.com/JackyAndroid/AndroidInterview-Q-A/blob/master/README-CN.md\">https://github.com/JackyAndroid/AndroidInterview-Q-A/blob/master/README-CN.md</a></li>\n<li><a href=\"http://www.diycode.cc/wiki/androidinterview\">http://www.diycode.cc/wiki/androidinterview</a></li>\n</ul>\n"},{"title":"你是如何理解AIDL的","_content":"\n- http://blog.csdn.net/luoyanglizi/article/details/51958091\n- http://blog.csdn.net/luoyanglizi/article/details/51980630\n","source":"_drafts/你是如何理解AIDL的.md","raw":"---\ntitle: 你是如何理解AIDL的\ntags:\n---\n\n- http://blog.csdn.net/luoyanglizi/article/details/51958091\n- http://blog.csdn.net/luoyanglizi/article/details/51980630\n","slug":"你是如何理解AIDL的","published":0,"date":"2016-07-24T06:20:19.226Z","updated":"2016-07-24T06:20:19.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir07u1yt0001ri22wzwexwkx","content":"<ul>\n<li><a href=\"http://blog.csdn.net/luoyanglizi/article/details/51958091\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoyanglizi/article/details/51958091</a></li>\n<li><a href=\"http://blog.csdn.net/luoyanglizi/article/details/51980630\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoyanglizi/article/details/51980630</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"http://blog.csdn.net/luoyanglizi/article/details/51958091\">http://blog.csdn.net/luoyanglizi/article/details/51958091</a></li>\n<li><a href=\"http://blog.csdn.net/luoyanglizi/article/details/51980630\">http://blog.csdn.net/luoyanglizi/article/details/51980630</a></li>\n</ul>\n"},{"title":"如何理解MVVM模式","_content":"- http://zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/\n","source":"_drafts/如何理解MVVM模式.md","raw":"---\ntitle: 如何理解MVVM模式\ntags:\n---\n- http://zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/\n","slug":"如何理解MVVM模式","published":0,"date":"2016-07-24T06:20:19.226Z","updated":"2016-07-24T06:20:19.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir07u1z50002ri22yjzcffyt","content":"<ul>\n<li><a href=\"http://zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/\" target=\"_blank\" rel=\"external\">http://zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"http://zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/\">http://zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}